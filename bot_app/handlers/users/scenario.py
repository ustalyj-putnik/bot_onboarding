from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram.utils.markdown import bold

from bot_app.bootstrap import dp, bot
from bot_app.states.scenario import ScenarioStates
from bot_app.keyboards.inline.scenario_kb import (
    scenarios_keyboard, SCENARIO_CB_PREFIX
)
from core.services.scenario_loader import get_scenario, Scenario
from core.services.ml_gateway import MLGateway, AnswerRating
from core.services.scenario_analytics import ScenarioAnalytics
import uuid

@dp.message_handler(Command("scenario"), state="*")
async def cmd_scenario(message: types.Message, state: FSMContext):
    """–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∞–∂—ë—Ä–æ–≤."""
    await state.finish()   # —Å–±—Ä–æ—Å–∏–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:",
        reply_markup=scenarios_keyboard()
    )
    await ScenarioStates.choosing.set()

@dp.callback_query_handler(
    Text(startswith=SCENARIO_CB_PREFIX),
    state=ScenarioStates.choosing
)
async def scenario_chosen(callback: types.CallbackQuery, state: FSMContext):
    scenario_id = callback.data[len(SCENARIO_CB_PREFIX):]
    scenario: Scenario = get_scenario(scenario_id)

    run_id = str(uuid.uuid4())

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ FSM-storage
    await state.update_data(
        scenario_id=scenario_id,
        current_step="1",
        retries_left=scenario.max_retries,
        run_id = run_id
    )

    # –∑–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∏–Ω—Ç—Ä–æ
    await callback.message.edit_text(
        f"{bold('–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω')}: {scenario.title}\n\n"
        f"{scenario.description}\n\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —á–∞—Ç–µ ‚Äì —è –±—É–¥—É –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã. "
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏—à–ª–∏—Ç–µ /cancel.",
        parse_mode="HTML"
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_step(callback.from_user.id, scenario, "1")

    await ScenarioStates.answering.set()
    await callback.answer()    # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª

@dp.message_handler(
    lambda m: not m.text.startswith("/"),
    content_types=types.ContentTypes.TEXT,
    state=ScenarioStates.answering
)
async def scenario_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    scenario: Scenario = get_scenario(data["scenario_id"])
    step_id: str = data["current_step"]
    run_id = data["run_id"]
    step = scenario.steps[step_id]

    user_reply = message.text

    attempt_no = (scenario.max_retries - data.get("retries_left", scenario.max_retries))

    # --- –≤—ã–∑–æ–≤ Saiga —á–µ—Ä–µ–∑ ML-Gateway ---
    rating = await MLGateway.evaluate_answer(
        user_id=message.from_user.id,
        user_answer=user_reply,
        expected=step.expected_answers,
        mistakes=step.common_mistakes,
        scenario_id=data["scenario_id"],
        step_id=step_id,
        attempt=attempt_no,
        run_id=run_id
    )
    # rating ‚àà {"correct", "partial", "incorrect"}

    # --- –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ ---
    if rating == AnswerRating.correct:
        next_id = step.on_correct

    else:
        retries_left = data.get("retries_left", scenario.max_retries) - 1
        await state.update_data(retries_left=retries_left)

        if retries_left >= 0 and step.hint:
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
            await message.answer(f"{step.hint}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        # –ø–æ–ø—ã—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å -> on_incorrect
        next_id = step.on_incorrect
        await state.update_data(retries_left=scenario.max_retries)

    # --- —Ñ–∏–Ω–∞–ª –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ---
    if next_id.startswith("outcome_"):
        # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∞—Ç
        result = await ScenarioAnalytics.build_and_save(
            user_id=message.from_user.id,
            scenario_id=data["scenario_id"],
            outcome_key=next_id,
            run_id=run_id
        )

        # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
        report = (
            f"üèÅ <b>–°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n"
            f"–ò—Ç–æ–≥: {scenario.outcomes[next_id]}\n\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ:   {result.correct_cnt}\n"
            f"‚ûñ –ß–∞—Å—Ç–∏—á–Ω–æ:    {result.partial_cnt}\n"
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ:     {result.incorrect_cnt}\n"
            f"üîÑ –°—Ä–µ–¥–Ω. –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —à–∞–≥: {result.avg_attempts}\n"
            f"üìà –ù–∞–≤—ã–∫: {result.skill_score} / 100"
        )

        await message.answer(report, parse_mode="HTML")
        await state.finish()                      # –≤—ã—Ö–æ–¥ –∏–∑ FSM
    else:
        await state.update_data(current_step=next_id)
        await send_step(message.chat.id, scenario, next_id)

@dp.message_handler(Command("cancel"), state=ScenarioStates.answering)
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.")

async def send_step(chat_id: int, scenario: Scenario, step_id: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    step = scenario.steps[step_id]
    await bot.send_message(chat_id, step.text)



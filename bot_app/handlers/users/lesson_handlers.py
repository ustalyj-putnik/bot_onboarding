from bot_app.bootstrap import dp
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from core.services import DirectionService, LessonService, ProgressService, QuizService
from core.db import Lesson
from bot_app.constants import FIRST_SECTION_CODE, SECOND_INTRO_CODE
from core.services import get_session
from core.db import Section, Direction
from sqlalchemy import select
from scripts.set_second_stage_commands import set_second_stage_commands

@dp.message_handler(commands=["start"])
async def cmd_start(message: Message):
    #sec = DirectionService.section_by_code(FIRST_SECTION_CODE)
    async with get_session() as s:
        sec = (await s.execute(
            select(Section).where(Section.code == FIRST_SECTION_CODE)
        )).scalar_one()
    lesson = await LessonService.first_lesson(sec.id)
    user_name = message.from_user.first_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n{lesson.body}")
    kb = InlineKeyboardMarkup()
    nxt = await LessonService.next_lesson(lesson.id)
    kb.add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"lesson_{nxt.id}"))
    await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                         reply_markup=kb)

@dp.callback_query_handler(text="transition")
async def to_second_stage_intro(cb: CallbackQuery):
    #intro_dir = DirectionService.dir_by_code(SECOND_INTRO_CODE)
    await set_second_stage_commands(dp)
    async with get_session() as s:
        intro_dir = (await s.execute(
            select(Direction).where(Direction.code == SECOND_INTRO_CODE)
        )).scalar_one()
        sec = (await s.execute(
            select(Section).where(Section.code == FIRST_SECTION_CODE)
        )).scalar_one()
    await ProgressService.complete_quiz(cb.from_user.id, sec.id, 1)
    text = intro_dir.intro_text or "–ù–∞—á–∏–Ω–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø!"
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="to_menu")
    )
    await cb.message.edit_text(text, reply_markup=kb)
@dp.message_handler(commands=["menu"])
async def show_menu(msg: Message):
    dirs = await DirectionService.list_directions()
    kb = InlineKeyboardMarkup(row_width=1)
    for d in dirs:
        kb.add(InlineKeyboardButton(d.name, callback_data=f"dir_{d.id}"))
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=kb)

# ---------- /progress ---------- #
@dp.message_handler(commands=["progress"])
async def cmd_progress(msg: Message):
    overview = await ProgressService.get_dir_overview(msg.from_user.id)

    text_parts = ["*–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:*"]
    kb = InlineKeyboardMarkup(row_width=1)

    for d, rows in overview.items():
        text_parts.append(f"\n*{d.name}*")
        for sec, done, score in rows:
            mark = "‚úÖ" if done else "‚ùå"
            text_parts.append(f"{mark} {sec.name}")
            # –∫–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
            cb = f"reset_{sec.id}"
            kb.add(InlineKeyboardButton(f"üîÑ –°–±—Ä–æ—Å–∏—Ç—å {sec.name}", callback_data=cb))

    await msg.answer("\n".join(text_parts), parse_mode="Markdown", reply_markup=kb)


# ---------- /reset (inline) ---------- #
@dp.callback_query_handler(lambda c: c.data.startswith("reset_"))
async def reset_section(cb: CallbackQuery):
    sec_id = int(cb.data.split("_")[1])
    await ProgressService.reset_section(cb.from_user.id, sec_id)
    await cb.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–¥–µ–ª–∞ —Å–±—Ä–æ—à–µ–Ω!", show_alert=True)
    # —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
    await cb.message.delete()
    fake = Message(chat=cb.message.chat, message_id=0)
    await cmd_progress(fake)

@dp.callback_query_handler(lambda c: c.data.startswith("dir_"))
async def choose_direction(cb: CallbackQuery):
    dir_id = int(cb.data.split("_")[1])
    secs = await DirectionService.list_sections(dir_id)
    # –ø–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    #dir = DirectionService.get(dir_id)
    async with get_session() as s:
        dir = await s.get(Direction, dir_id)
    kb = InlineKeyboardMarkup(row_width=1)
    for s in secs:
        kb.add(InlineKeyboardButton(s.name, callback_data=f"sec_{s.id}"))
    await cb.message.edit_text(dir.intro_text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("sec_"))
async def section_intro(cb: CallbackQuery):
    sec_id = int(cb.data.split("_")[1])
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"start_{sec_id}"))
    await cb.message.edit_text("–ù–∞—á–∏–Ω–∞–µ–º!", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("start_"))
async def start_section(cb: CallbackQuery):
    sec_id = int(cb.data.split("_")[1])
    lesson = await LessonService.first_lesson(sec_id)
    await ProgressService.mark_lesson(cb.from_user.id, lesson)
    await send_lesson(cb.message, lesson)

async def send_lesson(dst_msg: Message, lesson: Lesson, first_stage: bool = False):
    text = f"{lesson.body}"
    kb = InlineKeyboardMarkup()
    prev = await LessonService.prev_lesson(lesson.id)
    nxt  = await LessonService.next_lesson(lesson.id)
    if prev and not first_stage:
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"lesson_{prev.id}"))
    if nxt:
        kb.add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"lesson_{nxt.id}"))
    else:
        if first_stage:
            # –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
            kb.add(InlineKeyboardButton("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ 2-–π —ç—Ç–∞–ø",
                                        callback_data="transition"))
        else:
            kb.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É",
                                        callback_data=f"quiz_{lesson.section_id}_0"))
    if not first_stage:
        kb.add(InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="to_menu"))
    if lesson.media:
        #await dst_msg.edit_text(" ")  # –æ—á–∏—Å—Ç–∏–º
        with open(lesson.media, 'rb') as img:
            await dst_msg.answer_photo(photo=img, caption=lesson.body, reply_markup=kb)
    else:
        if first_stage:
            await dst_msg.answer(text, reply_markup=kb)
        else:
            await dst_msg.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("lesson_"))
async def lesson_nav(cb: CallbackQuery):
    lesson_id = int(cb.data.split("_")[1])
    #lesson = LessonService.get(lesson_id)
    #is_first_stage = (lesson.section.code == FIRST_SECTION_CODE)
    async with get_session() as s:
        lesson = await s.get(Lesson, lesson_id)
        section_code = await s.scalar(
            select(Section.code).where(Section.id == lesson.section_id)
        )
        is_first_stage = (section_code == FIRST_SECTION_CODE)
    await ProgressService.mark_lesson(cb.from_user.id, lesson)
    await send_lesson(cb.message, lesson, first_stage=is_first_stage)

@dp.callback_query_handler(lambda c: c.data.startswith("quiz_"))
async def quiz_flow(cb: CallbackQuery):
    _, sec_id, idx = cb.data.split("_")
    sec_id, idx = int(sec_id), int(idx)
    questions = await QuizService.get_questions(sec_id)
    if idx >= len(questions):
        score = len(questions)  # –≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–¥—Å—á—ë—Ç —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ —Å–µ—Å—Å–∏–∏
        await ProgressService.complete_quiz(cb.from_user.id, sec_id, score)
        await cb.message.edit_text(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(questions)}",
                                   reply_markup=InlineKeyboardMarkup().add(
                                       InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="to_menu"),
                                       InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data=f"quiz_{sec_id}_0")
                                   ))
        return
    q = questions[idx]
    kb = InlineKeyboardMarkup(row_width=1)
    for i, opt in enumerate(q.options):
        kb.add(InlineKeyboardButton(opt, callback_data=f"ans_{sec_id}_{idx}_{i}"))
    await cb.message.edit_text(f"*–í–æ–ø—Ä–æ—Å {idx+1}*\n{q.question_text}",
                               reply_markup=kb, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data.startswith("ans_"))
async def check_answer(cb: CallbackQuery):
    _, sec_id, idx, opt = cb.data.split("_")
    sec_id, idx, opt = int(sec_id), int(idx), int(opt)
    questions = await QuizService.get_questions(sec_id)
    q = questions[idx]
    text = "‚úÖ –í–µ—Ä–Ω–æ!" if QuizService.is_correct(q, opt) else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë."
    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data=f"quiz_{sec_id}_{idx+1}")
    )
    await cb.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(text="to_menu")
async def back_to_menu(cb: CallbackQuery):
    await cb.message.delete()
    await show_menu(cb.message)





'''
# —Ö—ç–Ω–¥–ª–µ—Ä, –æ—Ç–ª–∞–≤–ª–∏–≤–∞—é—â–∏–π –∫–æ–ª–±—ç–∫ "transition" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–π
@dp.callback_query_handler(text="transition")
async def send_second_stage_msg(callback: types.CallbackQuery):
    await set_second_stage_commands(dp)
    await callback.message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–∞–ø –æ–±—É—á–µ–Ω–∏—è! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è 4 '
                                       '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏. –ê —á—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ '
                                       '—É–¥–æ–±–Ω–µ–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö, —è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–ª—è —Ç–µ–±—è '
                                       '–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n'
                                       '1. –ö–æ–º–∞–Ω–¥–∞ "/menu" –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è. –° –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ '
                                       '—Ç—ã –º–æ–∂–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ '
                                       '—Ä–∞–∑–¥–µ–ª—ã –∏ —É—Ä–æ–∫–∏.\n\n'
                                       '2. –ö–æ–º–∞–Ω–¥–∞ "/ai". –¢–∞–∫ –∫–∞–∫ —è —É–º–Ω—ã–π –±–æ—Ç, —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –ø–æ–∏—Å–∫–µ –Ω—É–∂–Ω–æ–π '
                                       '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —ç—Ç—É '
                                       '–∫–æ–º–∞–Ω–¥—É, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∂–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å '
                                       '–±—É–¥–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç–µ–Ω, —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.\n\n'
                                       '3. –ö–æ–º–∞–Ω–¥–∞ "/help". –ï—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –∑–∞–±—É–¥–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—é—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã, '
                                       '–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ä–∞—Å—Å–∫–∞–∂—É –æ –Ω–∏—Ö –µ—â—ë'
                                       '—Ä–∞–∑!\n\n'
                                       '–í–ø–µ—Ä—ë–¥!',
                                  protect_content=True)


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /menu. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ (–≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è)
@dp.message_handler(Command("menu"))
async def show_menu(message: types.Message):
    await list_study_areas(message)


# –í—ã–≤–æ–¥–∏–º –≤–µ—Ä—Ö–Ω–∏–π (–Ω—É–ª–µ–≤–æ–π) —É—Ä–æ–≤–µ–Ω—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è
async def list_study_areas(message: Union[types.Message, types.CallbackQuery], **kwargs):
    markup = await study_areas_keyboard()  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è
    # –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ message, —Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /menu
    if isinstance(message, types.Message):
        await message.answer(text='–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è',
                             reply_markup=markup,
                             protect_content=True)
    # –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ CallbackQuery, —Ç–æ –µ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å –±–æ–ª–µ–µ –Ω–∏–∂–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    elif isinstance(message, types.CallbackQuery):
        call = message
        await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup)


# –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
async def list_study_sections(callback: types.CallbackQuery, study_area, **kwargs):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è, –ø—Ä–∏–Ω–∏–º–∞—è –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    markup = await study_sections_keyboard(study_area)
    await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è", reply_markup=markup)

# –í—ã–≤–æ–¥–∏–º –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—Ä–æ–∫–∞–º–∏
async def list_lessons(callback: types.CallbackQuery, study_area, study_section, **kwargs):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Ä–æ–∫–∞–º–∏, –ø—Ä–∏–Ω–∏–º–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è
    markup = await lessons_keyboard(study_area=study_area, study_section=study_section)
    await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫", reply_markup=markup)


# –í—ã–≤–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º (—Ç—Ä–µ—Ç—å–∏–º) —É—Ä–æ–≤–Ω–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def show_lesson(callback: types.CallbackQuery, study_area, study_section, lesson_id):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É—Ä–æ–∫–∞, –ø—Ä–∏–Ω–∏–º–∞—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è –∏ id —É—Ä–æ–∫–∞
    markup = await lesson_keyboard(study_area, study_section, lesson_id)
    # –ó–∞–±–∏—Ä–∞–µ–º –∏–∑ –ë–î —É—Ä–æ–∫ –ø–æ API –∏–∑ utils.db_api.second_stage_db_commands.get_lesson
    lesson = await get_lesson(study_area, study_section, lesson_id)
    # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É—é f-—Å—Ç—Ä–æ–∫—É
    text = f"{lesson}"
    await callback.message.edit_text(text, reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º –º–µ–Ω—é, –æ—Ç–ª–∞–≤–ª–∏–≤–∞—é—â–∏–π –∫–æ–ª–±—ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–º –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–ª–±—ç–∫ –¥–∞—Ç—ã menu_cd
# (—Å–º. second_stage_kb)
@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: types.CallbackQuery, callback_data: dict):
    current_level = callback_data.get('level')
    study_area = callback_data.get('study_area')
    study_section = callback_data.get('study_section')
    lesson_id = int(callback_data.get('lesson_id'))

    # –û–±–æ–∑–Ω–∞—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ get
    levels = {
        "0": list_study_areas,
        "1": list_study_sections,
        "2": list_lessons,
        "3": show_lesson
    }

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    current_level_function = levels[current_level]

    await current_level_function(call,
                                 study_area=study_area,
                                 study_section=study_section,
                                 lesson_id=lesson_id)'''
